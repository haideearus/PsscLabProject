using System;
using System.Collections.Generic;
using System.Linq;

namespace PsscFinalProject.Domain.Models
{
    public class Order
    {
        // Order Id (auto-generated by DB, for example)
        public int OrderId { get; set; }

        // Client associated with the order
        public int ClientId { get; set; }
        public Client Client { get; set; }

        // Order Date
        public DateTime OrderDate { get; set; }

        // Payment Method
        public PaymentMethod PaymentMethod { get; set; }

        // Total Amount
        public decimal TotalAmount { get; set; }

        // Shipping Address
        public string ShippingAddress { get; set; }

        // Order State (current state)
        public OrderState State { get; set; }

        // Bills, Deliveries, and OrderItems
        private readonly List<Bill> _bills;
        private readonly List<Delivery> _deliveries;
        private readonly List<OrderItem> _orderItems;

        public IReadOnlyCollection<Bill> Bills => _bills.AsReadOnly();
        public IReadOnlyCollection<Delivery> Deliveries => _deliveries.AsReadOnly();
        public IReadOnlyCollection<OrderItem> OrderItems => _orderItems.AsReadOnly();

        // Constructor to initialize the Order
        public Order(Client client, DateTime orderDate, PaymentMethod paymentMethod, decimal totalAmount, string shippingAddress)
        {
            Client = client ?? throw new ArgumentNullException(nameof(client));
            ClientId = client.ClientId;
            OrderDate = orderDate;
            PaymentMethod = paymentMethod;
            TotalAmount = totalAmount;
            ShippingAddress = shippingAddress;

            _bills = new List<Bill>();
            _deliveries = new List<Delivery>();
            _orderItems = new List<OrderItem>();
            State = OrderState.Placed; // Order is placed by default
        }


        // Method to change the state of the order
        public void SetOrderState(OrderState newState)
        {
            if (State == newState)
            {
                throw new InvalidOperationException($"Order is already in the {newState} state.");
            }
            State = newState;
        }

        // Add an item to the order
        public void AddOrderItem(OrderItem item)
        {
            if (State == OrderState.Delivered)
                throw new InvalidOperationException("Cannot add items to a delivered order.");

            _orderItems.Add(item);
            UpdateTotalAmount();
        }

        // Add a bill to the order
        public void AddBill(Bill bill)
        {
            if (State == OrderState.Delivered)
                throw new InvalidOperationException("Cannot add bills to a delivered order.");

            _bills.Add(bill);
        }

        // Add a delivery to the order
        public void AddDelivery(Delivery delivery)
        {
            if (State != OrderState.Billed)
                throw new InvalidOperationException("Delivery can only be added after billing.");

            _deliveries.Add(delivery);
        }

        // Calculate the total price of the order
        private void UpdateTotalAmount()
        {
            TotalAmount = _orderItems.Sum(item => item.Price * item.Quantity);
        }

        // Method to complete the payment for the order
        public void CompletePayment()
        {
            if (State != OrderState.Placed)
                throw new InvalidOperationException("Payment can only be completed for a placed order.");

            SetOrderState(OrderState.Billed);
        }

        // Method to deliver the order after it's billed
        public void CompleteDelivery()
        {
            if (State != OrderState.Billed)
                throw new InvalidOperationException("Delivery can only be completed after billing.");

            SetOrderState(OrderState.Delivered);
        }
    }

    // Enum for Payment Method
    public enum PaymentMethod
    {
        CreditCard,
        CashOnDelivery
    }

    // Enum for Order State
    public enum OrderState
    {
        Placed,
        Billed,
        Delivered
    }

}
